server: 
    port: 9000
topic:
    name: transactions
    partitions-num: 4
    replication-factor: 2
spring:
    kafka:
        bootstrap-servers:
        #- ${BOOTSTRAP_SERVERS_URL:ac733a94fb0dd4ce6bef55247130e47e-b3678a3184db5822.elb.us-east-2.amazonaws.com:9094}
        - localhost:9092
        properties:
            request.timeout.ms: 20000
            retry.backoff.ms: 500
            #schema.registry.url: http://${SHEMA_REGISTRY_ENDPOINT:ac97165a8a33c41dca0acabfc5898879-1191876181.us-east-2.elb.amazonaws.com:8081}
            schema.registry.url: http://localhost:8081
            # basic.auth.credentials.source: USER_INFO
            # schema.registry.basic.auth.user.info: ${USER_INFO:#{sruser:SrUser2021}}
        producer:
            key-serializer: org.apache.kafka.common.serialization.StringSerializer
            value-serializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
            acks: ${PRODUCER_ACKS:1}
            interceptor:
                classes: io.opentracing.contrib.kafka.TracingProducerInterceptor
        consumer:
            group-id: group_id
            auto-offset-reset: earliest
            key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
            value-deserializer: io.confluent.kafka.serializers.KafkaAvroDeserializer
            interceptor:
                classes: io.opentracing.contrib.kafka.TracingConsumerInterceptor
        template:
            default-topic:
        ssl:
            protocol: ${SSL_PROTOCOL:#{null}}
            trust-store-location: ${TRUSTSTORE_PATH:#{null}}
            trust-store-password: ${TRUSTSTORE_PASSWORD:#{null}}
            trust-store-type: ${TRUSTSTORE_TYPE:#{null}}
            key-store-location: ${KEYSTORE_PATH:#{null}}
            key-store-password: ${KEYSTORE_PASSWORD:#{null}}
            key-store-type: ${KEYSTORE_TYPE:#{null}}
logging:
    level:
        root: info
jeagerservicename: ${JAEGER_SERVICE_NAME:#{null}}
